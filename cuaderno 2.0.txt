COMPOSICION IN EN LA ELECTRONICA BINARIA
*Subneting
	- una ip compuesta por 4 octetos

html es un lenguaje de marcas de hipertextos, etiquetas
	etiquetas: abiertas, cerradas

existen las "metas" o "meta-etiquetas" que tienen diversas funciones...

Comentar Código:
HTML: <!-- -->
CSS: /* */
JS: //

* HTML *
 
	ETIQUETAS (no son lo mismo que las meta-etiquetas):
		h1-h6 (titulos)
		p (párrafo)
		br (espaciado de párrafos)
		hr (interlineado)
		ul (lista no organizada)
		ol (lista organizada)
		li (lista)
		a (para anclar un url)
		target (abre una ventana nueva redireccionando)
		sub = subíndice
		sup = super índice
		pre = preformateado (sin formato)
		img = imágenes

	ENTIDADES html:
	"&"{ampersand} (copy, euro, "vocal"acute, ntilde, #64) 
		acute=para que funcionen acentos en páginas extranjeras
		ntilde=hace funcionar la Ñ en paginas extranjeras
		#64=hace aparecer el @
	 
	target ():
		_blank = abrir en una nueva pestaña
		_sefl = abre en la pestaña actual
		_parent = contenido dentro de una frameset
		_top = contenido en la ventana padre, celdas de distribucion

	Form: estan los metodos GET y POST 
		<form action="" method="post" enctype="multipart/form-data">
		<form action="" method="get" enctype="application/x-www-form-urlencoded">

	DOM: ubica elementos atraves del ID

* CSS *

	modificamos diseño en CSS por medio de:
    	ID (#)
    	Clase (.clase)
    	Universal (*)
    	Objeto (p, h1...)
    	Grupos (.clase1, .clase2)

	fieldset "mejora la apariencia de los input"
	select

	Fuentes externas para css fonts.google.com

	win + R (C:\Windows\Fonts\)

	colores mas usados:
    	tomato
    	orange
    	dodgerblue
    	mediumseagreen
    	gray
    	slateblue
    	violet
    	lightgray

	+ es mejor descargar las fuentes de letras que importarlas

	SELECTORES DE ATRIBUTOS:
		comodines de busqueda de siertos elementos o de objetos q tenga sierto parametro (href^="")


	clear: both; (limpia toda configuracion predeterminada en CSS)


	Pagina responsiva: en CSS 
	@media screen and (max-width: 800px){
	    .leftcolumn,
    	.rightcolumn {
        	width: 100%;
        	padding: 0px;
    	}
	}

	PADRES (layout):
	- CONTAINER
	- ROW
	- COLUM

 	Tarjeta
    	  - header: cabecera
      	  - body: cuerpo
      	  - footer: pie del componente

	viñetas:
    	tipos de viñetas: circle, square, upper-roman, lower-greek (para editar independientemente,
    	en caso de querer cambiar el estilo de los "li" escribimos "List-style-type")
    	tambien podemos insertar imágenes como viñetas con el comando 'style="list.style-image:url..."'
    	en caso de que la imagen esté guardada en el ordenador, escribimos el nombre despues de URL(name.png)

	Videos en CSS:
	    en una etiqueta despues de (::) se llama pseudoclase

	- bootstrap libreria de CSS limitada.

* JAVASCRIPT *

	Estructura de datos de un objeto

    	Llave (key): Valor (value)
    	|| = (pipe) or (o) 
    	&& = and (y)
    	boolean = true (verdadero) | false (falso)
		== es equivalente a comparar dos valores
		=== es equivalente a comparar y a evaluar los tipos
    	!== equivalente a una negacion o diferencia
    	> equivale a un valor mayor que
    	< equivale a un valor menor que
    	<= equivale a un valor menor o igual que
    	>= equivale a un valor mayor o igual que
    	+ = suma
    	- = resta
    	* = multiplicacion
    	/ = division

	CONDICIONALES:
	
		IF 
		if (condicion){
		bloque de código a ejecutar si la condición es verdadera
			}
		
		SWITCH
			switch(expresion) {
  				case x:
    				bloque de codigo
    			break;
  				case y:
    				bloque de codigo
    			break;
  				default:
    				bloque de codigo
				}

		TERNARIA: sirve para recortar las condicionales q tienen solo dos opciones de respuesta
			const expresion = (grupo) =>  return grupo ? "opcion 1" : "opcion 2";

	un watcher (addEventListener) "vigilante"

		Funciones y Variables

			- las funciones llevan () y  las variables []
    		- Arreglo = Arrays
			- para imprimir arreglos usar []
    		
			variable comun: tipo string
    		const saludo = "Hola" + "Alex";

		    variable de tipo array, vacia
    		const arreglo = [];

    		Variable de tipo array lleno
    		la indexacion no es otra cosa que indices que indican el orden de las cosas empezando desde (0)
    			const semana = [
      			"lunes",
      			"martes",
      			"miercoles",
      			"jueves",
      			"viernes",
      			"sabado",
      			"domingo",
    			];

    		* la longitud del arreglo es 7
    		  indices 0-6
    		* lenght = muestra cuantos elementos tiene

    		Sin Desestructurar
    			const primerdia = semana[0];
    			const segundodia = semana[1];
    			console.log(primerdia, ",", segundodia);

    		Con Desestructuracion
    			const [diauno, diados, diatres, diacuatro, diacinco, diaseis, diasiete] =
      			semana;
    			console.log(diauno);

			Crear nueva instacia en una clase
				clase.push();

			Variables de tipo array de lectura y escritura
    			let meses = [];

			Funciones de tipo constructor y estático:
				
			- funcion tipo constructor

				class Calculadora {
    			el objeto constructor se encarga de crear las variables globales que se utilizaran dentro de la clase y sus funciones internas
    			this haces referencia a elementos que forman parte del objeto principal
    			ejemplo this.num1 es una variable global de calculadora, mientras que num1 es un parametro
    			
    			// puede ser considerado un método
    			constructor (num1, num2){
	        		this.num1 = num1;
        			this.num2 = num2;
    			}
    
    			suma = () => {
        			return (this.num1 + this.num2);
    			}
    			multiplicar = () => {
	        		return (this.num1 * this.num2);
    			}

    		- funcion de objeto estatico, es libre del constructor
    			static cInt = () => {
	        		return parseInt (num1);
    				}

				}

* ECMAScript 6 *

		webpackjs.js.org 
		babeljs.io

		Creacion
		- archivo package.json con un objeto vacio
		- en la terminal ejecutar "npm install --save-dev @babel/core @babel/cli @babel/preset-env"
		- creamos un "scripts" con la sintaxis 
    		"build": "build ./src -d (nombre de carpeta a eleccion)",
		- crear archivo babel.config.json y rellenar con 
    		"{
    		"presets": ["@babel/preset-env"]
    		}"
		- crear carpeta src con archivos .js e index.html
		- todos los archivos .js a exportar, al inicio de cada clase escribirles "export"
		- dentro de la carpeta src creamos un archivo llamad "app.js" alli se llamaran los demas archivos js con la etiqueta "import"
		- creamos un archivo general llamado webpack.config.js con la siguiente estructura:
    		Invoca el modulo path de NodeJS, que se encuentra en el directorio node_modules
    		const path = require('path');

    	Exportar la configuración del Módulo
    	Webpack Funcione con Babel, debo agregar la configuración del módulo de babel y su regla

    			const path = require('path');

			module.exports = {
        		entry: './src/app.js',
        		output: {
            		filename: 'bundle.js',
            		path: path.join(__dirname, 'dist'),
        		},
        		mode: "production",
        		module: {
            		rules: [
                		{
                    		test: /\.m?js$/,
                    		exclude: /node_modules/,
                    		use: {
                        		loader: "babel-loader",
                        		options: {
                            		presets: ['@babel/preset-env']
                        		}
                    		}
                		}
            		]
        		}
    		}; 

		- en el archivo package.json añadimos en el "scripts" el siguiente build:
    		"build": "webpack"
		- por ultimo en consola escribimos: npm install --save-dev babel-loader    
		- ya con todo eso creado podemos probar en la terminal si salta algun error con el comando npm run (nombre carpeta elegida)


		clase webpack: npm (noud package modules)
		npm i --save-dev @babel/cli @babel/core @babel/preset-env babel-loader css-loader style-loader webpack webpack-cli @fortawesome/fontawesome-free bootstrap
		npm i @fortawesome/fontawesome-free bootsrap


		bot.addEventListener(evento, () => { eval(action); }); //eval elimina las comillas en alert del js

		//programacion orientada a objetos
		
	* Desviacion de cierre \'  \'
	* append = adicionar despues de 
	* prepend = adicionar antes de
	* "top 1.5s ease-in" = ingresa suavemente desde arriba
	* '' = template string
 
cuando terminamos en return es porques un elemento padre
cuando terminamos en document.getElementById es porque es un objeto hijo


map es un iterador
los objetos dentro de un objeto se le llama métodos

un constructor no se puede agrupar con un elemento estático

return se puede convertir en string

MICROSERVICIOS

latest: ultima version funcional
imagenes: las imagenes son los pre requisitos para instalar un servidor

para eliminar directorios: rd /q /s nombre de directorio

Compose = es un orquestador, le dice al docker que leer 

contenedores = proyectos
imagenes = sistema operativo del proyecto
volumenes = discos duros de proyectos

PERSISTENCIA: 

docker-compose pull
docker-compose up -d
docker-compose exec servicio bash

ver errores = docker-compose logs nombre,de,server

eliminar contenedor: docker-compose down --rmi all -v --remove-orphans

* enviroment: se utiliza para pasarle propiedades al servicio


FROM mongo:4.2
RUN apt update
RUN apt upgrade -y
RUN apt install nano net-tools cron -y

version: "3.2"

services:

  mongoserver:
    image: mongo:4.2
    container_name: mongoserver
    hostname: mongo
    restart: always
    volumes:
      - ./persintencias/mongodb:/data/db:rw
    ports:
      - "0.0.0.0:27019:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=.curso2022.
    build:
      context: ./
      dockerfile: cursobuild


BACKEND

debug = depuracion

 requisitos: 
	npm i -g nodemon

 dependencias: 
	npm i express
	npm i dontenv



GUIA DE ES6
		npm -v (Version del npm)
		nvm install lts

		en el package escribir
			"scripts": {
			"construir": "babel ./src -d ./compilado --watch"
			}

		crear archivo general babel.config.json
			{
			"presets": ["@babel/preset-env"]
			}

		en el terminal escribir (npm run compilado)

		comandos git:
			1- git add  . (es obligatorio para cargar los cambios que se hicieron)
			2- git commit -m "mensaje" (se utiliza para enviar un mensaje en la actualizacion del repositorio) es obligatorio
			3- git push (sube los cambios al repositorio)
			git pull (actualiza el repositorio para ver si se hicieron cambios)

		comandos cmd:
			dir (muestra los directorios de la raiz)
			cd (entrar a un directorio)
			cd .. (salir del directorio)
			code . (abrir VSC del directorio actual)

	RUTA DE INSTALACION
	npm i --save-dev @babel/cli @babel/core @babel/preset-env babel-loader css-loader style-loader webpack webpack-cli @fortawesome/fontawesome-free bootstrap


clase jueves 10 de nov

	Nodemon: modulo global de ejecucion
	morgan: carga los middleware
	los callbacks leen losd detalles
	Letsencrypt
	%20 es un metodo de html empleado en las urls para añadir un espaciado

//middlewore es una aplicación que captura y procesa la información que está 
//generando la aplicación

//codigo 404 cuando no encuentra la página
//código 200 cuando la página la respondió sin problemas.

//para un backend los metodos a utilizar son GET, POST, PUT, DELETE
//GET=Lectura o petición
//POST= Escritura
//PUT= actualizar
//DELETE = eliminar

//método CRUD (Create(POST), Read(GET), Update(PUT), Delete(DELETE))

// cuando se colocan objetos en una const dentro de un (req, res), se le llama desestructurin

// parseInt() metodo para convertir string a un entero

// backend debe disponer de los datos

Base de datos:

	SQL = lenguaje
	SELECT = es una consulta
	FROM = tablas a consultar
	WHERE = lo que relaciona

	sentencia SQL SELECT * FROM productos;
	sentencia mongo productos.find({}, {})

	- relacional(las tablas se relacionan)
	- no relacional

Framworks (o algo asi se escribia): 

SQL:
	para crear tabla y evitar problemas tener en cuenta escribirlo de la siguiente manera: CREATE TABLE IF NOT EXISTS (nombre)
-- crear tabla
*para crear una tabla = CREATE TABLE estudiantes (
id int(11) PRIMARY KEY NOT NULL AUTO_INCREMENT,
nombres VARCHAR(64) NOT NULL,
apellidos VARCHAR(128) NOT NULL,
identidad int(11) NOT NULL
);

-- listar tablas de la base de datos
SHOW TABLES;

-- regenerar una tabla
TRUNCATE estudiantes;

-- agregar dos estudiantes
INSERT INTO estudiantes(nombre,apellidos,identidad) VALUES
('Dario','Martinez Duque', 1023465748),
('Junior','Andrade Cosio', 1023435348);

--consultar la tabla
*para visualizar = SELECT * FROM estudiantes

--actualizar informcaion de la tabla de estudiantes
UPDATE estudiantes SET Identidad=1023435347 WHERE id=2;

-- eliminar un registro en la tabla estudiantes
DELETE FROM estudiantes WHERE id=1;

-- consultas personalizadas
SELEC nombres, identidad FROM estudiantes WHERE nombres='Dario';

-- alterar tabla de estudiantes
ALTER TABLE estudiantes ADD COLUMN create_data timestamp DEFAULT current_timestamp;

-- alterar columna existente
ALTER TABLE estudiantes MODIFY COLUMN apellidos VARCHAR (64);

UPDATE estudiantes SET nombres='hugo', apellidos='andrade loza', identidad=12349872 WHERE id=3;

* SQL:

	3 grandes grupos
	- tipos numericos
	- tipos de fecha
	- tipos de cadena

	Tipos de datos numericos

	 - TinyInt: entero rango de valores va desde -128 a 127, 4 digitos -> empleado con valores pequeños pero enteros
	 - Int: entero que pudes tener o no un signo: 11 digitos - + -> empleado en valores enteros
	 - SmallInt: entero pequeño 5 digitos -> empleado en valores enteros
	 - MediumInt: entero en tamaño medio, 9 digitos -> empleado en valores enteros
	 - BigInt: entergo grande, 20 digitos -> empleado en valores enteros

	 - float: numeros decimales, ilimitado -> empleado en coma flotante
	 - double: numeros decimales, ilimitado -> empleado en coma flotante con presicion
	 - decimal: numero decimal descomprimido, ilimitado -> empleado en coma flotante, utilizado para almacenar daros de notacion cientifica

	Tipos de datos de cadena
	 - Char: almacena la cadena en la memoria, pero usa el espacio y sirve para guardar textos breves, longitud va de 1 a 255 caracteres
	 - Varchar: va de 1 a - 255 en la version 5.3 de mysql, nuevas versiones paso a 65535 caracteres
	 - blob: guarda informacion en lenguaje binario y se utiliza para almacenar imagenes, sonido y archivos
	 - Tinyblob 255 bytes, blob 65535 bytes, mediumblob 16777215 bytes, longblob 4gb
	 - text: guarda grandes cantidades de texto asi como los blobs, noticias, comentarios, publicaciones, etc.
	 - Tinytext, tex, mediumtext, longtext
	 - enum: tambien llamado enumeracion, utilizado para organizar arreglos de texto que el usuario debe seleccionar, condiciona los datos almacenados, 24 elementos
	 - set: crea listas especificas pero con 64 elementos

	Tipos de fecha y hora
	 - fecha: formato (AAAA-MM-DD)
	 - datetime: combinacion de fecha y hora (AA-MM-DD HH:MM:SS)
	 - timestamp: parecido al datetime solo que almacena el timezone (AAAA-MM-DD HH:MM:SS -5)
	 - time: almacena la hora en formato (HH:MM:SS)
	 - year: almacena el año AA(23) - AAAA(2023)

	crear una entidad en sql que contenga los siguientes datos:
	 - ID llave primaria, incrementable
	 - nombres longitud 64
	 - apellidos longitud 28
	 - cedula longitud 12
	 - fotografia
	 - fecha_nacimiento
	 - curriculum (archivo)
	 - breve_descripcion_personal
	 - fecha_hora_del_registro
	 - sexo ['hombre', 'mujer']
	 - edad
	 - idiomas ['español', 'ingles', 'frances']
	CREATE TABLE IF NOT EXIST personas (
	id int(11) PRIMARY KEY AUTO_INCREMENT,
	nombres VARCHAR(64),
	apellidos VARCHAR(64),
	cedula BIGINT(12),
	fotografia BLOB,
	fecha_nacimiento DATE,
	curriculum BLOB,
	breve_dscripcion_personal VARCHAR(255),
	fecha_hora_del_registro GETDATE,
	sexo ENUM(hombre, mujer),
	edad INT(2),
	idiomas ENUM(español, ingles, frances)
	) ENGINE=InnoDB;

	0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F

	A=C1
	B=C2
	C=C3
	D=C4


	esperando que esto este bien asi deberia quedar esto xd

	e=1100-0101, s=1110-0010, p=1011-0111, e=1100-0101, r=1100-1001, a=1100-0001, n=1101-0101, 


	Funciones y Alias

	* select sum(ventas) from productos where fecha=current_timestamp();